{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Run a hello-world application, running Windows instances in an auto-scaling group behind an ELB",
  "Parameters" : {
    "ScalingNotificationEmail": {
      "Description": "Email address to notify if there are any scaling operations",
      "Type": "String",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "must be a valid email address."
    },
    "KeyName" : {
      "Description" : "The EC2 Key-Pair name to retrieve Windows instances default password",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "RDPAllowCidrIp" : {
      "Description" : "The IP address range that can connect through RDP to EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PrivateAdminCidrIp" : {
      "Description" : "The IP address range that can connect to application admin interface (port 8080)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "InstanceType" : {
      "Description" : "Enter the instance type, only t2.micro is allowed to prevent additional costs.",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : ["t2.micro"]
    },
    "DefaultVPCId": {
      "Description": "Default VPC Id",
      "Type": "String"
    },
    "DefaultRouteTableId": {
      "Description": "Default Route Table Id",
      "Type": "String"
    },
    "DefaultVPCSecurityGroupId": {
      "Description": "Security Group Id of default VPC",
      "Type": "String"
    },
    "S3LogsBucketName": {
      "Description": "Name of S3 Bucket to store logs",
      "Type": "String"
    },
    "S3LogsBucketCreate": {
      "Description": "Should the S3 bucket for logs be created? (If it already exists and you specify to create it, the job will fail)",
      "Type": "String",
      "Default" : "Yes",
      "AllowedValues" : ["Yes", "No"]
    }
  },
  "Conditions" : {
    "S3LogsBucketCreation" : {"Fn::Equals" : [{"Ref" : "S3LogsBucketCreate"}, "Yes"]}
  },
  "Resources" : {
    "S3LogsBucket" : {
      "Type" : "AWS::S3::Bucket",
      "Condition" : "S3LogsBucketCreation",
      "DeletionPolicy" : "Retain",
      "Properties" : {
        "AccessControl" : "Private",
        "BucketName" : {
          "Ref": "S3LogsBucketName"
        }
      }
    },
    "S3Endpoint" : {
      "Type" : "AWS::EC2::VPCEndpoint",
      "Properties" : {
        "PolicyDocument" : {
          "Version":"2012-10-17",
          "Statement":[{
            "Effect":"Allow",
            "Principal": "*",
            "Action":["s3:PutObject"],
            "Resource":[ { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "S3LogsBucketName" }, "/*" ] ] } ]
          }]
        },
        "ServiceName" : { "Fn::Join": [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".s3" ] ] },
        "RouteTableIds": [{ "Ref": "DefaultRouteTableId" }],
        "VpcId" : { "Ref": "DefaultVPCId" }
      }
    },
    "S3LogsBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Condition" : "S3LogsBucketCreation",
      "DeletionPolicy" : "Retain",
      "Properties" : {
        "Bucket" : {"Ref" : "S3LogsBucket"},
        "PolicyDocument": {
          "Statement":[{
            "Action":["s3:PutObject"],
            "Effect":"Allow",
            "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "S3LogsBucketName" } , "/*" ]]},
            "Principal":"*",
            "Condition": {
              "StringEquals": {
                "aws:sourceVpc": { "Ref" : "DefaultVPCId" }
              }
            }
          }]
        }
      }
    },
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "ScalingNotificationEmail"
            },
            "Protocol": "email"
          }
        ]
      }
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": { "Ref": "AWS::Region" }
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": "2",
        "MaxSize": "6",
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ],
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "NotificationTopic"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": 900,
        "TerminationPolicies": [
          "ClosestToNextInstanceHour",
          "OldestLaunchConfiguration"
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M",
          "Count": "2"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "2",
          "MaxBatchSize": "1",
          "WaitOnResourceSignals": "true",
          "PauseTime": "PT15M"
        }
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": "ami-2979185a",
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "InstanceType": { "Ref": "InstanceType" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "<powershell>\n",
          "Import-Module NetSecurity\n",
          "New-NetFirewallRule",
          " -Name tcp-80-8080 ",
          " -DisplayName TCP-80-8080",
          " -Protocol TCP -Enabled True",
          " -Profile Any -Action Allow -Direction Inbound -LocalPort 80,8080\n",
          "cfn-init.exe -v -s ",
          { "Ref" : "AWS::StackName" },
          " -r LaunchConfig",
          " --region ", { "Ref" : "AWS::Region" },
          " --configset default\n",
          "</powershell>\n"
        ]]}}
      },
      "Metadata": {
        "Comment": "Run hello-world application",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": ["pre-req", "app-run", "post-process"]
          },
          "pre-req": {
            "packages": {
              "msi" : {
                "nodejs" : "https://nodejs.org/dist/v4.4.7/node-v4.4.7-x64.msi",
                "aws-cli" : "https://s3.amazonaws.com/aws-cli/AWSCLI64.msi"
              }
            },
            "files": {
              "C:\\install-source\\git.exe" : {
                "source" : "https://github.com/git-for-windows/git/releases/download/v2.9.2.windows.1/Git-2.9.2-64-bit.exe"
              },
              "C:\\install-source\\cfn-signal.ps1": {
                "content": { "Fn::Join" : ["", [
                  "cfn-signal.exe -e 0",
                  " --stack ", { "Ref": "AWS::StackId" },
                  " --resource WebServerGroup",
                  " --region ", { "Ref" : "AWS::Region" }
                ]]}
              },
              "C:\\install-source\\copy-logs.ps1": {
                "content": { "Fn::Join" : ["", [
                  "$instanceId=(New-Object System.Net.WebClient).DownloadString(\"http://169.254.169.254/latest/meta-data/instance-id\")\n",
                  "aws --no-sign-request s3",
                  " cp --recursive",
                  " C:\\cfn\\log",
                  " s3://", { "Ref": "S3LogsBucketName" }, "/$instanceId/"
                ]]}
              },
              "C:\\install-source\\create-scheduled-task-copy-logs.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$TaskName = \"Copy Logs to s3\"\n",
                      "$TaskDescr = \"Run a powershell script to copy logs to s3 using aws-cli\"\n",
                      "$TaskCommand = \"C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe\"\n",
                      "$TaskScript = \"C:\\install-source\\copy-logs.ps1\"\n",
                      "$TaskArg = \"-WindowStyle Hidden -NonInteractive -Executionpolicy RemoteSigned -file $TaskScript\"\n",
                      "$TaskAction = New-ScheduledTaskAction -Execute \"$TaskCommand\" -Argument \"$TaskArg\"\n",
                      "$TaskTrigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes 5) -RepetitionDuration ([System.TimeSpan]::MaxValue)\n",
                      "Register-ScheduledTask -Action $TaskAction -Trigger $TaskTrigger -TaskName \"$TaskName\" -User \"System\" -RunLevel Highest"
                    ]
                  ]
                }
              }
            },
            "sources": {
              "C:\\install-source": "https://nssm.cc/release/nssm-2.24.zip"
            },
            "commands": {
              "1-gitinstall": {
                "command": "C:\\install-source\\git.exe  /SILENT /COMPONENTS=\"icons,ext\\reg\\shellhere,assoc,assoc_sh\"",
                "waitAfterCompletion": "0"
              },
              "99-reboot": {
                "command": "shutdown -t 10 -r -f",
                "waitAfterCompletion": "forever"
              }
            }
          },
          "app-run": {
            "sources": {
              "C:\\app": "https://github.com/radykal-com/nodejs-getting-started/archive/master.zip"
            },
            "commands": {
              "1-npminstall": {
                "cwd": "C:\\app\\nodejs-getting-started-master\\1-hello-world",
                "command": "npm install",
                "waitAfterCompletion": "0"
              },
              "2-service-setup": {
                "cwd": "C:\\install-source\\nssm-2.24\\win64",
                "command": "nssm.exe install hello-world node.exe C:\\app\\nodejs-getting-started-master\\1-hello-world\\app.js",
                "waitAfterCompletion": "0"
              }
            },
            "services": {
              "windows" : {
                "hello-world" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "sources" : ["C:\\app\\nodejs-getting-started-master\\1-hello-world"]
                }
              }
            }
          },
          "post-process": {
            "commands": {
              "10-schedule-task-copy-logs": {
                "cwd": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0",
                "command": "powershell.exe -ExecutionPolicy RemoteSigned -Command C:\\install-source\\create-scheduled-task-copy-logs.ps1",
                "waitAfterCompletion": "0"
              },
              "99-signal-ok": {
                "cwd": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0",
                "command": "powershell.exe -ExecutionPolicy RemoteSigned -Command C:\\install-source\\cfn-signal.ps1",
                "waitAfterCompletion": "0"
              }
            }
          }
        }
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "300",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "300",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU >= 50% for 3 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "3",
        "Threshold": "50",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanOrEqualToThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 40 for 15 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "3",
        "Threshold": "40",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": { "Ref": "AWS::Region" }
        },
        "CrossZone": "false",
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          },
          {
            "LoadBalancerPort": "8080",
            "InstancePort": "8080",
            "Protocol": "HTTP"
          }
        ],
        "SecurityGroups": [
          {
            "Fn::GetAtt" : [ "ELBSecurityGroup", "GroupId" ]
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "2",
          "Interval": "15",
          "Timeout": "5"
        }
      }
    },
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "80 public from internet, 8080 from parametrizable CidrIp and default VPC",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": {
              "Ref": "PrivateAdminCidrIp"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": {
              "Ref": "DefaultVPCSecurityGroupId"
            }
          }
        ]
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable RDP, HTTP and internal HTTP (8080)",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupOwnerId": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.OwnerAlias"
              ]
            },
            "SourceSecurityGroupName": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.GroupName"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupOwnerId": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.OwnerAlias"
              ]
            },
            "SourceSecurityGroupName": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.GroupName"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": {
              "Ref": "PrivateAdminCidrIp"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": {
              "Ref": "DefaultVPCSecurityGroupId"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "CidrIp": {
              "Ref": "RDPAllowCidrIp"
            }
          }
        ]
      }
    }
  },
  "Outputs" : {
    "PublicURL" : {
      "Description" : "Application URL",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]}
    },
    "PrivateURL" : {
      "Description" : "Application Private URL",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}, ":8080"]]}
    },
    "S3LogsBucketName": {
      "Description" : "Bucket name where logs are stored, separated by instances",
      "Value": { "Ref": "S3LogsBucketName" }
    }
  }
}